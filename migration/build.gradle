apply plugin: 'com.android.library'

android {
    compileSdkVersion SDK_VERSION
    buildToolsVersion BUILD_TOOLS_VERSION
    defaultConfig {
        minSdkVersion MIN_SDK_VERSION
        targetSdkVersion SDK_VERSION
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        debug {
            debuggable true
            testCoverageEnabled true
        }
        release {
            debuggable false
        }
    }
    productFlavors {
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    lintOptions {
        textReport true
        textOutput 'stdout'
        disable 'GoogleAppIndexingWarning'
    }
    dexOptions {
        preDexLibraries = !System.getenv("CI")
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
}

final PACKAGE = 'com.github.gfx.android.orma.migration.sqliteparser.g'
final PACKAGE_PATH = PACKAGE.replaceAll(/\./, '/')
final GRAMMAR_FILE = project.file("src/main/antlr/SQLite.g4")
final ANTLR_OUTPUT_DIR = "$buildDir/generated/source/antlr"

configurations {
    antlr
}

android.sourceSets.main.java.srcDir ANTLR_OUTPUT_DIR

task generateParserSources(type: JavaExec) {
    description = 'Generate SQLiteParser sources with ANTLR4'
    main = 'org.antlr.v4.Tool'

    // See https://github.com/antlr/antlr4/blob/master/doc/tool-options.md for details
    args = [GRAMMAR_FILE, '-o', "$ANTLR_OUTPUT_DIR/$PACKAGE_PATH", '-package', PACKAGE, '-Werror', '-long-messages']
    classpath = configurations.antlr

    // inputs and outputs are necessary for incremental build in ad-hoc task
    // https://docs.gradle.org/current/userguide/more_about_tasks.html#sec:task_input_output_runtime_api
    inputs.files GRAMMAR_FILE
    outputs.dir "$ANTLR_OUTPUT_DIR/$PACKAGE_PATH"

    doLast {
        delete fileTree(dir: "$ANTLR_OUTPUT_DIR/$PACKAGE_PATH", include: '*.tokens')
        fileTree(dir: "$ANTLR_OUTPUT_DIR/$PACKAGE_PATH", include: '*.java').each { File file ->
            file.setLastModified(GRAMMAR_FILE.lastModified())
        }
    }
}

tasks.preBuild.dependsOn(generateParserSources)

task updateSqliteGrammar(type: Exec) {
    final url = "https://raw.githubusercontent.com/bkiers/sqlite-parser/master/src/main/antlr4/nl/bigo/sqliteparser/SQLite.g4"
    commandLine "curl", "-L", url, "-o", GRAMMAR_FILE
}
dependencies {
    api project(':core')
    antlr 'org.antlr:antlr4:4.6'
    implementation 'org.antlr:antlr4-runtime:4.6'
    api "androidx.annotation:annotation:${ANDROIDX_ANNOTATION_VERSION}"

    testImplementation "org.robolectric:robolectric:4.0"
    testImplementation 'androidx.test:core:1.0.0'
    testImplementation 'androidx.test:runner:1.1.0'
    testImplementation 'androidx.test.ext:junit:1.0.0'
    testImplementation 'org.hamcrest:hamcrest-library:1.3'
    androidTestImplementation 'androidx.test:core:1.0.0'
    androidTestImplementation 'androidx.test:runner:1.1.0'
    androidTestImplementation 'androidx.test.ext:junit:1.0.0'
    androidTestImplementation 'org.hamcrest:hamcrest-library:1.3'
}
